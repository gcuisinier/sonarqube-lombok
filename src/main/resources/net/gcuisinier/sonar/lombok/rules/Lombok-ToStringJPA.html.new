<p>Using <code>@Entity</code> and Lombok's <code>@ToString</code> togethers can cause performance issue as the call to toString will load all relations, including the Lazy ones.</p>
<p>In order to avoid that, you have to exclude the Lazy relation from the ToString generation feature of Lombok by using <code>@ToString.Exclude</code> on those ones.</p>
<p>Note that <code>@Data</code> annotation is also impacted by this issue as it includes <code>@ToString</code> functionality.</p>


<h2>Noncompliant Code Example</h2>
<pre>
@Entity
@ToString
public static class EntityWithOneToManyNonCompliant1 {

    /***********************/

    @OneToMany()
    private Set&lt;Object&gt; oneToManyNonCompliant; // Noncompliant

    @OneToMany(fetch = FetchType.LAZY)
    private Set&lt;Object&gt; oneToManyNonCompliant2; // Noncompliant


    /***********************/
    @OneToOne(fetch = FetchType.LAZY)
    private Object oneToOneNonCompliantAsLazy; // Noncompliant


    /***********************/
    @ManyToOne(fetch = FetchType.LAZY)
    private Object manyToOneCompliantAsEager; // Noncompliant

    /***********************/

    @ManyToMany()
    private Set&lt;Object&gt; manyToManyNonCompliant;// Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Entity
@ToString
public static class EntityWithOneToManyNonCompliant1 {

    /***********************/

    @OneToMany()
    @ToString.Exclude
    private Set&lt;Object&gt; oneToManyCompliantAsExcluded;

    @OneToMany(fetch = FetchType.EAGER)
    private Set&lt;Object&gt; oneToManyCompliantAsEager;

    /***********************/

    @OneToOne()
    private Object oneToOneCompliant;

    @OneToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Object OneToOneCompliantAsLazyButExcluded;

    /***********************/

    @ManyToOne()
    private Object manyToOneNonCompliant;

    @ManyToOne(fetch = FetchType.LAZY)
    @ToString.Exclude
    private Object manyToOneCompliantAsExcluded;

    /***********************/

    @ManyToMany()
    @ToString.Exclude
    private Set&lt;Object&gt; manyToManyCompliantAsExcluded;

    @ManyToMany(fetch = FetchType.EAGER)
    private Set&lt;Object&gt; manyToManyCompliantAsEager;
}
</pre>
<h2>See</h2>
<ul>
    <li> <a href="https://thorben-janssen.com/lombok-hibernate-how-to-avoid-common-pitfalls/#Don8217t_Use_EqualsAndHashCode">Lombok & Hibernate: How to Avoid Common Pitfalls</a> </li>
</ul>